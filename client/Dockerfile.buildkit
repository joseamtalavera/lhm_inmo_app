# Stage 1: Build the app
FROM node:16-alpine AS build
WORKDIR /app

# Set build-time environment variables
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=${REACT_APP_API_URL}

# Use BuildKit mounts for temporary directories and npm cache
RUN --mount=type=tmpfs,target=/app/tmp \
    --mount=type=tmpfs,target=/app/npm-cache \
    npm config set cache /app/npm-cache --global

# Copy package files and install dependencies using tmpfs for npm cache
COPY package*.json ./
RUN --mount=type=tmpfs,target=/app/npm-cache npm install --legacy-peer-deps

# Copy the rest of the app's source code
COPY . .

# Set ESLint cache file location to a tmpfs mount location
ENV ESLINT_CACHE_FILE=/tmp/.eslintcache

# Build the app using tmpfs mounts for both npm cache and /tmp to avoid space issues
RUN --mount=type=tmpfs,target=/app/npm-cache,size=1073741824 \
    --mount=type=tmpfs,target=/tmp,size=1073741824 \
    --mount=type=tmpfs,target=/app/node_modules/.cache \
    npm run build

# Stage 2: Serve the app with Nginx
FROM nginx:alpine
# Copy the build output to the Nginx HTML directory
COPY --from=build /app/build /usr/share/nginx/html

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
